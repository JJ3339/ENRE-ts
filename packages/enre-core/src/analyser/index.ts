import {parse} from '@babel/parser';
import traverse from '@babel/traverse';
import {eGraph, ENREEntityFile, pseudoR, rGraph} from '@enre/container';
import environment from '@enre/environment';
import {verbose} from '@enre/logging';
import {getFileContent} from '../utils/fileFinder';
import {ENREContext} from './context';
import {createCommandStackHandler} from './context/commandStack';
import traverseOpts from './visitors';

/**
 * Read, parse and analyse a single file by a giving file path.
 */
export const analyse = async (fileEntity: ENREEntityFile) => {
  verbose(`Processing file: ${fileEntity.fullname}`);

  const content = await getFileContent(fileEntity.fullname);

  const ast = parse(content, {
    // This seems to be a parser bug, which only affects the first line
    // startColumn: 1,
    sourceType: fileEntity.sourceType,
    plugins: ['typescript'],
    /**
     * Enabling error recovery suppresses some TS errors
     * and make it possible to deal with in user space.
     */
    errorRecovery: true,
  });

  /**
   * A stack to help trace AST traverse process for parent determination.
   *
   * The first element is always the file to be processed.
   */
  const context = new ENREContext(fileEntity);
  eGraph.onAdd = createCommandStackHandler(context);

  /**
   * Using cjs default export in esm causes a complicated issue,
   * since during the development pipeline, this code will be executed
   * in two different environments, the first one is nodejs where js files
   * are generated by tsc, which does not rewrite module-interop staffs,
   * in which case, a `.default` is necessary; however, in the second environment,
   * that is the jest testing environment, js files are generated by babel,
   * who will smartly append a `.default`, which makes code in here an error.
   * To support both cases, here according to the NODE_ENV, the `.default` is
   * appended or not.
   */
  if (environment.test) {
    traverse(ast, traverseOpts(context));
  } else {
    // @ts-ignore
    traverse.default(ast, traverseOpts(context));
  }

};

export const cleanAnalysis = () => {
  eGraph.reset();
  rGraph.reset();
  pseudoR.reset();
};
