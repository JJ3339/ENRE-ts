import {parse} from '@babel/parser';
import traverse from '@babel/traverse';
import {eGraph, ENREEntityFile} from '@enre-ts/data';
import {getFileContent} from '../utils/fileUtils';
import createENREContext, {ENREContext} from './context';
import {createModifierHandler} from './context/modifier';
import traverseOpts from './visitors';
import {logger} from '../index';
import {ClassHierarchyAnalyzer as CHAnalyzer} from './callgraph/ClassHierarchyAnalysisAlgorithm'
/**
 * Read, parse and analyze a single file.
 */
export const analyze = async (fileEntity: ENREEntityFile) => {
  logger.verbose(`Processing file: ${fileEntity.path}`);

  const content = await getFileContent(fileEntity.path);

  let ast;
  try {
    const plugins = ['decorators'];
    fileEntity.lang === 'ts' ? plugins.push('typescript') : undefined;
    fileEntity.isJsx ? plugins.push('jsx') : undefined;
    ast = parse(content, {
      // This seems to be a parser bug, which only affects the first line
      // startColumn: 1,
      sourceType: fileEntity.sourceType,
      // @ts-ignore
      plugins,
      /**
       * Enabling error recovery suppresses some TS errors
       * and make it possible to deal with in user space.
       */
      errorRecovery: true,
    });
  } catch {
    logger.error(`Failed to parse the file ${fileEntity.getQualifiedName()}`);
  }

  
  
  if (ast) {
    /**
     * A stack to help trace AST traverse process for parent determination.
     *
     * The first element is always the file to be processed.
     */
    const context = createENREContext(fileEntity);
    eGraph.onAdd = createModifierHandler(context);

    /**
     * Using cjs default export in esm causes a complicated issue,
     * since during the development pipeline, this code will be executed
     * in two different environments, the first one is nodejs where js files
     * are generated by tsc, which does not rewrite module-interop staffs,
     * in which case, a `.default` is necessary; however, in the second environment,
     * that is the jest testing environment, js files are generated by babel,
     * who will smartly append a `.default`, which makes code in here an error.
     * To support both cases, here according to the NODE_ENV, the `.default` is
     * appended or not.
     */
    if (process.env.NODE_ENV === 'test') {
      //traverse<ENREContext>(ast, traverseOpts, undefined, context);
    } else {
      // @ts-ignore
      traverse.default<ENREContext>(ast, traverseOpts, undefined, context);
    }
    
    // traverse<ENREContext>(ast, {
    //     ClassDeclaration(path) {
    //         const className = path.node.id.name;
    //         const baseClassName = path.node.superClass ? (path.node.superClass as t.Identifier).name : null;
    //         CHAanalyzer.addClass(className, baseClassName);
    //     },
    //     undefined,context
    // });

    // CHAanalyzer.printHierarchy('A');
  }
};
