// script
use coref::javascript::*

fn getFunctionUsingArguments(db: JavascriptDB) -> *FunctionLikeDeclaration {
    for (id in Identifier(db)) {
        if (id.getText() = "arguments" &&
            // Is not the right part of a PropertyAccessExpression `a.arguments`
            (
                // Using !isPropertyAccessExpression() will cause unground error
                id.getParent().getKind() != 205 ||
                id.getParent().getLastChild().key_neq(id)
            )
        ) {
            for (path in getNodePath(id.to<Node>())) {
                if (isFunctionDeclaration(path) ||
                    isFunctionExpression(path) ||
                    isMethodDeclaration(path)
                ) {
                    yield path.to<FunctionLikeDeclaration>()
                }
            }
        }
    }
}

fn getArgumentsInFunction(db: JavascriptDB) -> *Identifier {
    for (id in Identifier(db)) {
        if (id.getText() = "arguments" &&
            // Is not the right part of a PropertyAccessExpression `a.arguments`
            (
                // Using !isPropertyAccessExpression() will cause unground error
                id.getParent().getKind() != 205 ||
                id.getParent().getLastChild().key_neq(id)
            )
        ) {
            for (path in getNodePath(id.to<Node>())) {
                if (isFunctionDeclaration(path) ||
                    isFunctionExpression(path) ||
                    isMethodDeclaration(path)
                ) {
                    yield id
                }
            }
        }
    }
}

fn function(
    filePath: string,
    functionOid: int,
    functionStartLine: int,
    functionStartColumn: int,
    paramCount: int,
    isLastParamRestParam_SB: string,
) -> bool {
    let (db = getDefaultDB()) {
        for (func in getFunctionUsingArguments(db)) {
            if (filePath = func.getRelativePath() &&
                functionOid = func.id &&
                functionStartLine = func.getStartLineNumber() &&
                functionStartColumn = func.getStartColumnNumber() &&
                paramCount = func.to<FunctionLikeDeclaration>().getParameterCount()
            ) {
                if (paramCount = 0 &&
                    isLastParamRestParam_SB = "-"
                ) {
                    return true
                }

                if (paramCount != 0) {
                    let (lastParam = func.getParameter(paramCount - 1)) {
                        if (lastParam.isRestParameter() &&
                            isLastParamRestParam_SB = "true"
                        ) {
                            return true
                        }

                        if (!lastParam.isRestParameter() &&
                            isLastParamRestParam_SB = "false"
                        ) {
                            return true
                        }
                    }
                }
            }
        }
    }
}

fn argumentsContext(
    filePath: string,
    argumentsOid: int,
    argumentsStartLine: int,
    argumentsStartColumn: int,
    parentNodeType: string,
) -> bool {
    let (db = getDefaultDB()) {
        for (id in getArgumentsInFunction(db)) {
            if (filePath = id.getRelativePath() &&
                argumentsOid = id.id &&
                argumentsStartLine = id.getStartLineNumber() &&
                argumentsStartColumn = id.getStartColumnNumber() &&
                parentNodeType = getNodeTypeString(id.getParent())
            ) {
                return true
            }
        }
    }
}

fn main() {
    output(function())
    output(argumentsContext())
}