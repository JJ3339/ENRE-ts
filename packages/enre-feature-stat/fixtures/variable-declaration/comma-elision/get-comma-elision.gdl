// script

use coref::javascript::*


// // The first element is elided
// //     v
// const [, a] = [1, 2];

// // In old times, people usually do this. Though this is not comma
// // elision syntax, it is still an interesting pattern.
// //     v
// const [_, b] = [1, 2];

fn get_all_variables(filePath: string, startLine: int, nodeOid: int) -> bool {
    let (db = JavascriptDB::load("coref_javascript_src.db")) {
        for (node in Node(db), file in File(db)) {
            if (isVariableDeclaration(node)) {
                if (file = node.getLocation().getFile() &&
                    filePath = file.getRelativePath() &&
                    startLine = node.getLocation().getStartLineNumber() &&
                    nodeOid = node.id
                ) {
                    return true
                }
            }
        }
    }
}



fn get_comma_elision( variableOid: int, elisionNum: int) -> bool {
    let (db = JavascriptDB::load("coref_javascript_src.db")) {
        for (var in Node(db)) {
            // 判断是对象或是数组
            if (isVariableDeclaration(var)) {
                if (variableOid = var.id) {
                    for (child in var.getChild(0).getAChild()) {
                        if ((child.getText() = "n/a" || child.getText() = "_") &&
                            elisionNum = child.getLocation().getStartColumnNumber()
                            ) {
                                return true
                            }
                    }
                }
            }
        }
    }
}

fn main() {
    output(get_all_variables())
    output(get_comma_elision())
}