// script

use coref::javascript::*

// //     vvvv
// import type {Type} from 'module';

// //      vvvv
// import {type Type} from 'module';

// //     vvvv
// export type {Type};

// 实现思路:1.找到对应的ImportDeclaration和ExportDeclaration
// 2.因为ImportDeclaration没有更新获取import type的方法所以使用对比text方法
// 3.因为ExportDeclaration没有更新获取export type的方法所以使用对比text方法

fn get_all_import_export(filePath: string, startLine: int, nodeOid: int) -> bool {
    let (db = JavascriptDB::load("coref_javascript_src.db")) {
        for (node in Node(db), file in File(db)) {
            if (isImportDeclaration(node) || isExportDeclaration(node)) {
                if (file = node.getLocation().getFile() &&
                    filePath = file.getRelativePath() &&
                    startLine = node.getLocation().getStartLineNumber() &&
                    nodeOid = node.id
                ) {
                    return true
                }
            }
        }
    }
}

fn get_type_import_export(targetOid: int) -> bool {
    let (db = JavascriptDB::load("coref_javascript_src.db")) {
        for (node in Node(db)) {
            // 判断是Import还是export
            if (isImportDeclaration(node) || isExportDeclaration(node)) {
                if (node.getChild(0).getText().substr(0,4) = "type" ||
                    node.getChild(0).getChild(0).getChild(0).getText().substr(0,4) = "type" ||
                    (isExportDeclaration(node) && node.getText().substr(7,4) = "type")
                ) {
                    if (targetOid = node.id) {
                        return true
                    }
                }
            }
        }
    }
}

fn main() {
    output(get_all_import_export())
    output(get_type_import_export())
}