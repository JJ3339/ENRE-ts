// script

use coref::javascript::*

// //        vvvvv
// namespace X.Y.Z {
//     /* Empty */
// }

// 实现逻辑：1.寻找到对已经的ModuleDeclaration
// 2.紧跟着去寻找第二个孩子节点是否仍然是ModuleDeclaration
// 3.因为第一个孩子节点是name，而第二个节点仍是ModuleDeclaration就是该特性
fn get_all_modules(filePath: string, startLine: int, nodeOid: int) -> bool {
    let (db = JavascriptDB::load("coref_javascript_src.db")) {
        for (node in Node(db), file in File(db)) {
            if (isModuleDeclaration(node)) {
                if (file = node.getLocation().getFile() &&
                    filePath = file.getRelativePath() &&
                    startLine = node.getLocation().getStartLineNumber() &&
                    nodeOid = node.id
                ) {
                    return true
                }
            }
        }
    }
}


fn get_namespace_identifier_path(targetOid: int) -> bool {
    let (db = JavascriptDB::load("coref_javascript_src.db")) {
        for (node in ModuleDeclaration(db)) {
            // 找到对应的ModuleDeclaration
            
                if (isModuleDeclaration(node.getChild(1))) {
                    if (targetOid = node.id
                    ) {
                        return true
                    }
                }

        }
    }
}

fn main() {
    output(get_all_modules())
    output(get_namespace_identifier_path())
}