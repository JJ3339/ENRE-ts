// script

use coref::javascript::*


// class Clz<T> {
//     foo<T>(arg: T) {
//         /* Empty */
//     }

//     // The `T` of `arg` is method `foo`'s.
// }
// class CBad<U> {
//     /**
//      * In this case, the extended `U` still refers to `foo.U` rather than `CBad.U`.
//      * Hence this forms a circlic reference which is a syntax error.
//      */
//     foo<U extends U>(arg: U) {
//         /* Empty */
//     }

//     // TSError: Type parameter 'U' has a circular constraint.(2313)
// }

// 实现思路：1.先找到classdeclaration
// 2.获取classclaration的type parameter
// 3.获取该类下的methodclaration
// 4.获取类下的形式变量并进行比对

fn get_all_type_parameter(filePath: string, startLine: int, nodeOid: int) -> bool {
    let (db = getDefaultDB()) {
        for (node in Node(db), file in File(db)) {
            if (isMethodDeclaration(node)) {
                for (child in node.getAChild()) {
                    if (isTypeParameter(child)) {
                        if (file = node.getLocation().getFile() &&
                            filePath = file.getRelativePath() &&
                            startLine = child.getLocation().getStartLineNumber() &&
                            nodeOid = child.id
                        ) {
                            return true
                        }
                    }
                }
            }
        }
    }
}
fn get_overridden_type_paramter(targetOid: int) -> bool {
    let (db = getDefaultDB()) {
        for (node in Node(db), file in File(db)) {
            // 找到对应的类
            if (isClassDeclaration(node)) {
                for (child0 in node.getAChild()) {
                    // 寻找是否含有TypeParameter
                    if (isTypeParameter(child0)) {
                        for (child1 in node.getAChild()) {
                            // 寻找该类下的方法
                            if (isMethodDeclaration(child1)) {
                                for (classtypechild in child0.getAChild()) {
                                    for (methodchild in child1.getAChild()) {
                                        if (isTypeParameter(methodchild)) {
                                            for (methodtypechild in methodchild.getAChild()) {
                                                if ( targetOid = methodchild.id
                                                ) {
                                                    return true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

fn main() {
    output(get_all_type_parameter())
    output(get_overridden_type_paramter())
}