// script

use coref::javascript::*
// use enrets::forceGetName

// This function tries get a class's name.
// This is useful for any schema that does not provide a getNameNode method.
//
// This function uses PropertyName's getName method since class name cannot be fancy,
// no need for using our patched version of get name function.
fn forceGetName(node: ClassLikeDeclaration) -> string {
    for (childIndex in int::__undetermined_all__()) {
        let (child = node.getChild(childIndex)) {
            let (tmp = PropertyName(__all_data__).find(child)) {
                return tmp.getName()
            }
        }
    }
}

fn allClasses(oid: int, filePath: string, startLine: int) -> bool {
    let (db = JavascriptDB::load("coref_javascript_src.db")) {
        for (clz in ClassLikeDeclaration(db), file in File(db)) {
            if (oid = clz.id &&
                file = clz.getLocation().getFile() &&
                filePath = file.getRelativePath() &&
                startLine = clz.getLocation().getStartLineNumber()) {
                    return true
            }
        }
    }
}

fn classWithName(oid: int, className: string) -> bool {
    let (db = JavascriptDB::load("coref_javascript_src.db")) {
        for (clz in ClassLikeDeclaration(db), file in File(db)) {
            if (oid = clz.id &&
                className = forceGetName(clz)) {
                return true
            }
            // if (oid = clz.id) {
            //     for (node in Node(db)) {
            //         if (node.key_eq(clz) &&
            //         className = forceGetName(db, node)) {
            //             return true
            //         }
            //     }
            // }
        }
    }
}

fn main() {
    output(allClasses())
    output(classWithName())
}
